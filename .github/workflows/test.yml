name: Tests_CICD

on:
  push:
    branches:
      - main  # or any branch you want to trigger actions from

jobs:
  build:
    strategy:
      matrix:
        os: [ windows-latest ]   # Define the OS matrix
        browser: [chromium,firefox]   # Define the browser matrix
    runs-on: ${{ matrix.os }}    #  Runs on the specified OS in the matrix

    steps:
      # Checkout the code from GitHub repository
      - name: Checkout code
        uses: actions/checkout@v3

          # Caching Python dependencies (before setting up Python)
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-cache-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
              ${{ runner.os }}-pip-cache-

      # Set up Python 3.12.5
      - name: Set up Python 3.12.5
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.5'

      # Install dependencies from requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Install Playwright Browsers
      - name: Install Playwright Browsers
        run: |
          python -m playwright install chromium firefox

      - name: Install Allure Commandline on Windows
        run: |
            # Download the Allure command-line tool zip file
            Invoke-WebRequest -Uri "https://github.com/allure-framework/allure2/releases/download/2.32.0/allure-2.32.0.zip" -OutFile "allure.zip"
            
            # Extract the zip file to the current directory
            Expand-Archive -Path "allure.zip" -DestinationPath "allure"
            
            # Verify the extraction, ensure allure.bat exists
            if (Test-Path "allure\allure-2.32.0\bin\allure.bat") {
            Write-Host "allure.bat found"
            } else {
            Write-Host "allure.bat not found"
            exit 1
            }
            
            # Move the Allure directory to a common location
            $allurePath = "C:\allure"
            if (-not (Test-Path $allurePath)) {
            New-Item -Path $allurePath -ItemType Directory
            }
            move-item -Path "allure\allure-2.32.0" -Destination $allurePath -Force
            
            # Persist Allure to PATH
            [System.Environment]::SetEnvironmentVariable("PATH", "$env:PATH;$allurePath\allure-2.32.0\bin", [System.EnvironmentVariableTarget]::Machine)

      - name: Verify Allure installation
        run: |
                # Verify Allure is installed correctly
                & "C:\allure\allure-2.32.0\bin\allure.bat" --version

      - name: Run Tests with Allure results and Test coverage
        continue-on-error: true
        run: |
                 pytest --alluredir=allure-results --maxfail=1 --disable-warnings --browser=${{matrix.browser}} --cov=Signedly --cov-report=xml --cov-report=term

      - name: Generate Allure Report
        run: |
              & "C:\allure\allure-2.32.0\bin\allure.bat" generate allure-results-chromium allure-results-firefox --clean -o allure-report
              #  & "C:\allure\allure-2.32.0\bin\allure.bat" generate allure-results --clean -o allure-report-${{ matrix.browser }}

          # Deploy the Allure Report to GitHub Pages
      - name: Deploy Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
           publish_dir: allure-report # This points to the 'allure-report' folder at the root level
           github_token: ${{ secrets.GH_TOKEN }}  # Uses GitHub token for authentication
           publish_branch: gh-pages  # Pushes to the 'gh-pages' branch
           allow_empty_commit: true  # Allows empty commits, useful for initial deployments
           keep_files: false  # Removes all files in the gh-pages branch before pushing new content



